# UI/UX Standards for App Store Review Analysis Tool

## Component Guidelines

### Review Cards

**Always include these elements in review displays:**

```tsx
<div className="p-3 border rounded-lg">
  <div className="flex items-center gap-2 mb-1">
    <span className="text-yellow-500">{"★".repeat(review.rating)}</span>
    <span className="text-sm text-gray-500">{review.region.toUpperCase()}</span>
    <span className="text-xs text-gray-400">{review.version}</span>
  </div>
  <div className="font-medium text-sm">{review.title}</div>
  <div className="text-sm text-gray-600 line-clamp-2">{review.content}</div>
  <div className="flex justify-between items-center mt-2 text-xs text-gray-500">
    <span>{review.author}</span>
    <span>{formatDate(review.date)}</span>
  </div>
</div>
```

### Rating Display

**Consistent rating formatting:**

- **Overview**: `{rating.toFixed(1)}★` (1 decimal place)
- **Details**: `{rating.toFixed(2)}★` (2 decimal places)
- **Always use star symbol**: ★ (not \* or other characters)

### Interactive Elements

**Performance metrics should be clickable:**

```tsx
<div
  className="flex justify-between items-center p-3 bg-red-50 rounded-lg cursor-pointer hover:bg-red-100"
  onClick={() => showReviewsForCategory("crashes")}
>
  <span className="font-medium">Crashes & Errors</span>
  <span className="text-xl font-bold text-red-600">{count}</span>
</div>
```

### Loading States

**Use consistent loading patterns:**

```tsx
{
  isPending && (
    <div className="space-y-2">
      <div className="flex justify-between text-sm text-gray-600">
        <span>Fetching reviews...</span>
        <span>{Math.round(progress)}%</span>
      </div>
      <Progress value={progress} />
    </div>
  );
}
```

## Data Display Standards

### Charts and Visualizations

- **Responsive containers**: Always use `ResponsiveContainer`
- **Consistent colors**: Use predefined color palette
- **Tooltips**: Include detailed information on hover
- **Empty states**: Show helpful messages when no data

### Tables and Lists

- **Sortable columns**: Enable sorting where appropriate
- **Pagination**: For large datasets
- **Search/filter**: Allow users to find specific data
- **Export options**: CSV/PDF download buttons

### Error Handling

```tsx
{
  error && (
    <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
      <div className="flex items-center gap-2 text-red-800">
        <AlertCircle className="h-4 w-4" />
        <span className="font-medium">Error</span>
      </div>
      <p className="text-red-700 mt-1">{error}</p>
    </div>
  );
}
```

## Accessibility Standards

### Keyboard Navigation

- **Tab order**: Logical tab sequence
- **Focus indicators**: Visible focus states
- **Keyboard shortcuts**: Common shortcuts (Ctrl+S, etc.)

### Screen Reader Support

- **Alt text**: For all images and icons
- **ARIA labels**: For interactive elements
- **Semantic HTML**: Use proper heading hierarchy

### Color and Contrast

- **WCAG AA compliance**: Minimum 4.5:1 contrast ratio
- **Color independence**: Don't rely solely on color
- **High contrast mode**: Support for accessibility preferences

## Responsive Design

### Mobile-First Approach

```tsx
// Use responsive classes
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
  <div className="text-center p-4 bg-blue-50 rounded-lg">
    <div className="text-2xl font-bold text-blue-600">{value}</div>
    <div className="text-sm text-gray-600">{label}</div>
  </div>
</div>
```

### Breakpoints

- **Mobile**: < 768px
- **Tablet**: 768px - 1024px
- **Desktop**: > 1024px

### Touch Targets

- **Minimum size**: 44px × 44px for touch targets
- **Spacing**: Adequate spacing between interactive elements
- **Gesture support**: Swipe, pinch, etc. where appropriate

## Performance Guidelines

### Lazy Loading

```tsx
// Use dynamic imports for heavy components
const HeavyChart = dynamic(() => import("./HeavyChart"), {
  loading: () => <div>Loading chart...</div>,
});
```

### Image Optimization

- **WebP format**: Use modern image formats
- **Lazy loading**: For images below the fold
- **Responsive images**: Different sizes for different screens

### Bundle Optimization

- **Code splitting**: Split by routes and features
- **Tree shaking**: Remove unused code
- **Minification**: Compress production builds

## State Management

### Loading States

```tsx
const [isPending, startTransition] = useTransition();
const [progress, setProgress] = useState(0);

// Use for server actions
startTransition(async () => {
  // Update progress
  setProgress(25);
  const result = await serverAction();
  setProgress(100);
});
```

### Error States

```tsx
const [error, setError] = useState<string | null>(null);

// Clear errors on new actions
const handleAction = () => {
  setError(null);
  // ... action logic
};
```

### Success States

```tsx
const [success, setSuccess] = useState<string | null>(null);

// Show success messages
setSuccess("Analysis completed successfully!");
setTimeout(() => setSuccess(null), 3000);
```

## Animation and Transitions

### Smooth Transitions

```css
/* Use CSS transitions for smooth state changes */
.transition-all {
  transition: all 0.2s ease-in-out;
}
```

### Loading Animations

- **Skeleton screens**: Show content structure while loading
- **Progress indicators**: For long-running operations
- **Spinners**: For quick operations

### Micro-interactions

- **Hover effects**: Subtle feedback on interaction
- **Click feedback**: Visual confirmation of actions
- **Smooth scrolling**: For long content

## Form Guidelines

### Input Validation

```tsx
const [errors, setErrors] = useState<Record<string, string>>({});

// Real-time validation
const validateInput = (value: string) => {
  if (!value.trim()) {
    setErrors(prev => ({ ...prev, appId: "App ID is required" }));
  } else {
    setErrors(prev => ({ ...prev, appId: "" }));
  }
};
```

### Form Submission

```tsx
const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();

  if (Object.values(errors).some(error => error)) {
    return;
  }

  // Submit form
};
```

### Success Feedback

```tsx
{
  success && (
    <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
      <div className="flex items-center gap-2 text-green-800">
        <CheckCircle className="h-4 w-4" />
        <span>{success}</span>
      </div>
    </div>
  );
}
```

description:
globs:
alwaysApply: false

---
