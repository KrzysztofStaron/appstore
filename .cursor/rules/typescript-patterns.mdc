# TypeScript Patterns and Conventions

## Type Definitions

All types are centralized in [app/types.ts](mdc:app/types.ts). Key interfaces:

- `AppStoreReview` - Individual review data structure
- `AppMetadata` - App information from App Store
- `AnalysisResult` - Complete analysis output
- `ActionableStep` - Actionable insights with priority levels
- `ViewType` - Navigation view types

## Component Patterns

### Client Components

- Use `"use client"` directive at the top for components requiring interactivity
- Prefer functional components with hooks over class components
- Use descriptive prop interfaces with TypeScript

### Server Components

- Default to server components when possible
- Use server actions in [app/actions.ts](mdc:app/actions.ts) for data mutations
- Implement proper error boundaries

## State Management

### React State

- Use `useState` for local component state
- Use `useTransition` for expensive operations (see [app/page.tsx](mdc:app/page.tsx))
- Prefer controlled components for form inputs

### State Structure

```typescript
// Example from app/page.tsx
const [appId, setAppId] = useState("6670324846");
const [selectedRegions, setSelectedRegions] = useState<string[]>(["us", "gb", "ca"]);
const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
```

## API Integration

### App Store API

- Use [lib/app-store-api.ts](mdc:lib/app-store-api.ts) for all App Store interactions
- Implement proper error handling and retry logic
- Use caching for performance optimization

### API Routes

- Place API routes in [app/api/](mdc:app/api/) directory
- Use streaming responses for long-running operations
- Implement proper error handling and status codes

## Error Handling

- Use try-catch blocks for async operations
- Provide meaningful error messages to users
- Log errors for debugging purposes
- Use TypeScript strict mode for better type safety

## Performance Optimization

- Use React.memo for expensive components
- Implement proper loading states
- Use dynamic imports for code splitting
- Optimize re-renders with useCallback and useMemo when necessary
