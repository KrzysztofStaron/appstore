# UI Component Patterns and shadcn/ui Usage

## Component Structure

### File Organization

- Place UI components in [components/ui/](mdc:components/ui/) for shadcn/ui components
- Place view components in [components/views/](mdc:components/views/) for page-specific views
- Use PascalCase for component file names (e.g., `DashboardView.tsx`, `Sidebar.tsx`)

### Component Naming

- Prefix components with their type: `ButtonAccount.tsx`, `CardAnalyticsMain.tsx`
- Use descriptive names that indicate the component's purpose
- Follow the pattern: `{Type}{Purpose}.tsx`

## shadcn/ui Integration

### Available Components

The project uses shadcn/ui components from [components/ui/](mdc:components/ui/):

- `Button` - Interactive buttons with variants
- `Card` - Content containers with headers
- `Input` - Form input fields
- `Select` - Dropdown selections
- `Progress` - Progress indicators
- `Alert` - Status messages
- `Tabs` - Tabbed interfaces
- `ScrollArea` - Scrollable content areas

### Usage Patterns

```typescript
// Import from local ui directory
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

// Use with proper variants
<Button variant="default" size="sm">Action</Button>
<Card className="bg-gradient-to-br from-zinc-800/50 to-zinc-900/30 border border-zinc-700/50">
  <CardHeader>
    <CardTitle>Title</CardTitle>
  </CardHeader>
  <CardContent>Content</CardContent>
</Card>
```

## Styling Patterns

### Tailwind CSS Classes

- Use the established dark theme with zinc/slate colors
- Follow the gradient pattern: `bg-gradient-to-br from-zinc-800/50 to-zinc-900/30`
- Use border styling: `border border-zinc-700/50`
- Apply backdrop blur: `backdrop-blur-xl`

### Responsive Design

- Use mobile-first approach with Tailwind breakpoints
- Implement responsive grids: `grid grid-cols-1 lg:grid-cols-2 gap-8`
- Use responsive spacing: `p-4 md:p-6 lg:p-8`

### Animation and Transitions

- Use Tailwind's `animate-pulse` for loading states
- Apply smooth transitions: `transition-all duration-300`
- Use `animate-spin` for loading indicators

## Layout Patterns

### Sidebar Layout

Reference [components/Sidebar.tsx](mdc:components/Sidebar.tsx) for the main navigation pattern:

- Fixed width sidebar with `w-80`
- Dark background with backdrop blur
- Border separation with `border-r border-zinc-800/50`

### Main Content Area

- Use `flex-1` for expanding content
- Implement `ScrollArea` for scrollable content
- Apply consistent padding: `p-8`

### Card Grid Layout

```typescript
<div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
  <Card className="bg-gradient-to-br from-zinc-800/50 to-zinc-900/30 border border-zinc-700/50">
    {/* Card content */}
  </Card>
</div>
```

## Icon Usage

### Lucide React Icons

- Import icons from `lucide-react`
- Use consistent icon sizing: `h-6 w-6` for standard, `h-4 w-4` for small
- Apply color classes: `text-zinc-300`, `text-blue-400`

### Icon Patterns

```typescript
import { BarChart3, Brain, TrendingUp, Zap, Globe } from "lucide-react";

// Use in navigation items
{ id: "dashboard", label: "Overview", icon: BarChart3, color: "text-blue-400" }
```

## Form Components

### Input Patterns

- Use `Label` component for accessibility
- Apply consistent styling with dark theme
- Implement proper validation states

### Select Patterns

- Use `Select` component for dropdowns
- Implement proper value handling
- Apply consistent styling

## Loading States

### Skeleton Loading

- Use `animate-pulse` for skeleton elements
- Match the actual content structure
- Apply consistent background colors

### Progress Indicators

- Use `Progress` component for determinate progress
- Implement custom progress for complex operations
- Show meaningful progress details

## Error States

### Alert Components

- Use `Alert` component for error messages
- Apply appropriate alert variants
- Include actionable error information

### Error Boundaries

- Implement proper error boundaries
- Provide fallback UI for component errors
- Log errors for debugging
